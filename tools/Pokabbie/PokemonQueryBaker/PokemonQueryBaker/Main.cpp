#include "BakeHelpers.h"

#include <string>
#include <fstream>
#include <vector>
#include <set>

extern "C"
{
	#include "rogue_baked.h"

	extern const struct BaseStats gBaseStats[];
}

u16 eggLookup[NUM_SPECIES]{ SPECIES_NONE };
u8 evolutionCountLookup[NUM_SPECIES]{ 0 };

std::set<u16> eggEvolutionTypes[NUM_SPECIES];

static bool HasEvolutionConnectionOfType(u16 species, u16 type)
{
	u16 eggSpecies = eggLookup[species];
	auto types = eggEvolutionTypes[eggSpecies];

	return types.find(type) != types.end();
}

int main()
{
	for (int s = SPECIES_NONE; s < NUM_SPECIES; ++s)
	{
		if (s == SPECIES_NONE)
		{
			eggLookup[s] = s;
			evolutionCountLookup[s] = 0;
		}
		else
		{
			u16 eggSpecies = Rogue_GetEggSpecies(s);
			eggLookup[s] = eggSpecies;
			evolutionCountLookup[s] = Rogue_GetEvolutionCount(s);

			if (gBaseStats[s].type1 != TYPE_NONE)
				eggEvolutionTypes[eggSpecies].insert(gBaseStats[s].type1);

			if (gBaseStats[s].type2 != TYPE_NONE)
				eggEvolutionTypes[eggSpecies].insert(gBaseStats[s].type2);
		}
	}

	std::string const c_OutputPath = "..\\..\\..\\..\\src\\data\\rogue_bake_data.h";

	std::ofstream file;
	file.open(c_OutputPath, std::ios::out);

	file << "// == WARNING ==\n";
	file << "// DO NOT EDIT THIS FILE\n";
	file << "// This file was automatically generated by PokemonQueryBaker\n";
	file << "\n";

	file << "const u16 gRogueBake_EggSpecies[NUM_SPECIES] =\n{\n";
	for (int s = SPECIES_NONE; s < NUM_SPECIES; ++s)
	{
		file << "\t[" << s << "] = " << (int)eggLookup[s] << ",\n";
	}
	file << "};\n";
	file << "\n";

	file << "const u8 gRogueBake_EvolutionCount[NUM_SPECIES] =\n{\n";
	for (int s = SPECIES_NONE; s < NUM_SPECIES; ++s)
	{
		file << "\t[" << s << "] = " << (int)evolutionCountLookup[s] << ",\n";
	}
	file << "};\n";

	//file << "const u8 gRogueBake_EvolutionChainTypes[NUM_SPECIES][8] =\n{\n";
	//for (int s = SPECIES_NONE; s < NUM_SPECIES; ++s)
	//{
	//	u16 eggSpecies = eggLookup[s];
	//
	//	file << "\t[" << s << "] = { ";
	//	
	//	for (auto type : eggEvolutionTypes[eggSpecies])
	//	{
	//		file << type << ", ";
	//	}
	//
	//	file << "},\n";
	//}
	//file << "};\n";

	file << "\n";

	for (int t = 0; t < NUMBER_OF_MON_TYPES; ++t)
	{
		file << "const u16 gRogueBake_SpeciesTypeTable_" << t << "[] =\n{\n";
		for (int s = SPECIES_NONE; s < NUM_SPECIES; ++s)
		{
			if (HasEvolutionConnectionOfType(s, t))
			{
				file << "\t" << s << ",\n";
			}
		}
		file << "\tSPECIES_NONE\n";
		file << "};\n\n";
	}


	file << "const u16* const gRogueBake_SpeciesTypeTables[NUMBER_OF_MON_TYPES] =\n{\n";
	for (int t = 0; t < NUMBER_OF_MON_TYPES; ++t)
	{
		file << "\t[" << t << "] = gRogueBake_SpeciesTypeTable_" << t << ",\n";
	}
	file << "};\n";

	file.close();
	return 0;
}
